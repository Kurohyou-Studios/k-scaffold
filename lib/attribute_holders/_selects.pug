//- @pugdoc
  name: select
  memberof: Attributes
  arguments:
    - {object} selectObj - The object describing the select
    - {block} block - The content within the select
  description: A mixin to create a select element. Also provides an option mixin that is restricted to only work within the select. Trigger objects can be passed as arguments on the select call itself or on the default selected option. Uses K-scaffold global variables to control how option mixins within the select's block behave.
  example: |
    include ../_k.pug
    +select({name:'my select'})
      +option({value:'a value','data-i18n':'a translation key',trigger:{affects:['some_attribute']}})
      +option({value:'value 2','data-i18n':'translation 2'})
      +option({value:'value 3'})
        |Some Text we include via the option's block
    |
    |
    +select({
      name:'my select',
      trigger:{
        affects:['some_attribute']
      }
    })
      +option({value:'a value','data-i18n':'a translation key'})
      +option({value:'value 2','data-i18n':'translation 2'})
      +option({value:'value 3'})
        |Some Text we include via the option's block
mixin select(obj)
  - checkKUse();
  -
    obj.class = obj.class ?
      replaceProblems(obj.class) :
      undefined;
  - obj.name = attrName(obj.name);
  - obj.title = obj.title || attrTitle(obj.name);
  - obj.name = `attr_${obj.name}`;
  - addFieldToFieldsetObj(obj);

  //- Initialize the object that will be passed to the cascade
  - const triggerObj = {...obj,type:'select'};
  - const options = [];
  
  mixin option(optObj)
    -
      optObj.class = optObj.class ?
        replaceProblems(optObj.class) :
        undefined;
    -
      const pushObj = {
        obj:optObj,
        attributes: attributes || {}
      };
    if block
      - pushObj.block = block;
    - options.push(pushObj);


  if !block
    option(value='!!! Error: empty select !!!')
  else
    - block();
    - const selObj = makeElementObj(obj);
    select&attributes(selObj)&attributes(attributes)
      each o in options
        if o.hasOwnProperty('selected') && o.hasOwnProperty('value')
          - triggerObj.value = o.value;
          if o.trigger && !triggerObj.trigger
            - triggerObj.trigger = o.trigger;
        - const elemObj = makeElementObj(o.obj);
        option&attributes(elemObj)&attributes(o.attributes)
          - o.block && o.block();
    - storeTrigger(triggerObj);
