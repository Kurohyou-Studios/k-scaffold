//- @pugdoc
  name: fillLeft
  description: A mixin that creates an html construction ready to be styled for use as a [fill-to-left section](https://wiki.roll20.net/CSS_Wizardry#Fill_Radio_Buttons_to_the_Left).
  arguments:
    - {object} radioObj - The object containing the details of the radio input to create. Similar to the {@link radio}, but the value property passed is used as the default checked value.
    - {object} [divObj] - Optional object containing any details of the div to be applied such as class, id, or other properties. Class and ID can also be supplied by attaching them to the mixin invocation just like with a regular div.
    - {array} valueArray - Array containing the values to be used for the fill to left construction. These should be in the order that they should be displayed left to right.
    - {boolean} [noClear] - Optional argument that tells the mixin whether or not to apply the `fill-left__radio--clearer` class to the first radio button value. If falsy (or not passed), the class is applied. If truthy, the class is not applied.
  example: |
    include ../_k.pug
    +fillLeft({
      radioObj:{name:'my radio'},
      divObj:{class:'some-custom-class'},
      valueArray:[1,2,3,4,5]
    })
mixin fillLeft({radioObj,divObj,valueArray=[],noClear,displayValues=[]})
  - divObj = divObj || {};
  - const blocks = [];
  - let currValue;
  mixin pip(obj)
    - currValue = obj.value;
    - const pipObj = {...radioObj,...obj};
    -
      pipObj.class = pipObj.class ? 
        `${pipObj.class} fill-left__radio` :
        `fill-left__radio`;
    if obj.value === radioObj.value
      - pipObj.checked = '';
    
    +#{noClear ? 'radio' : 'checkbox'}(pipObj)
    
  mixin displayControl(obj)
    //- spaceholder
    -
      const value = obj.hasOwnProperty('value') ?
        obj.value :
        currValue;
    - const addClass = `fill-left__display-control`;
    -
      const oClass = obj.class ?
        `${obj.class} ${addClass}` :
        addClass;
    -
      const name = obj.name ?
        obj.name :
        `${radioObj.name} max`;
    +#{value === 0 ? 'hidden' : 'checkbox'}({...obj,hidden:'',name,value,class:oClass})

  .fill-left&attributes(divObj)&attributes(attributes)
    if !noClear
      - const clearObj = {...radioObj,value:0};
      -
        clearObj.class = clearObj.class ? 
          `${clearObj.class} fill-left__radio` :
          `fill-left__radio`;
      +hidden(clearObj)
    each value,index in valueArray
      - const usedObj = {value};
      if displayValues.length
        - usedObj['data-value'] = displayValues[index];
      +pip(usedObj)
    block
//- End Mixin
